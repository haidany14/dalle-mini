===== FILE BEGIN =====
PATH: bot_hub/telegram/__init__.py
MODE: 0644
SHA256: AUTO
-----8<----- START CONTENT -----8<-----
from __future__ import annotations

from fastapi import APIRouter
from .webhook_handler import router as telegram_router

__all__ = ["telegram_router"]
-----8<----- END CONTENT -----8<-----
===== FILE END =====
===== FILE BEGIN =====
PATH: bot_hub/telegram/telegram_parser.py
MODE: 0644
SHA256: AUTO
-----8<----- START CONTENT -----8<-----
from __future__ import annotations

from typing import Any, Dict, Optional


def normalize_update(update: Dict[str, Any]) -> Dict[str, Any]:
    """Extract common fields from Telegram update."""
    msg = update.get("message") or update.get("edited_message") or {}
    chat = msg.get("chat") or {}
    doc = msg.get("document") or None
    text = msg.get("text") or ""

    return {
        "chat_id": chat.get("id"),
        "message_id": msg.get("message_id"),
        "text": text,
        "document": _normalize_document(doc) if doc else None,
    }


def _normalize_document(doc: Dict[str, Any]) -> Dict[str, Any]:
    return {
        "file_id": doc.get("file_id"),
        "file_unique_id": doc.get("file_unique_id"),
        "file_name": doc.get("file_name"),
        "mime_type": doc.get("mime_type"),
        "file_size": doc.get("file_size"),
    }
-----8<----- END CONTENT -----8<-----
===== FILE END =====
===== FILE BEGIN =====
PATH: bot_hub/telegram/upload_bridge.py
MODE: 0644
SHA256: AUTO
-----8<----- START CONTENT -----8<-----
from __future__ import annotations

import hashlib
from typing import Dict, Any


def stub_register_document(document: Dict[str, Any]) -> str:
    """
    Create a stub delivery record id from Telegram document metadata.
    We do not have bytes here (webhook only), so we persist a synthetic id.
    """
    basis = (document.get("file_unique_id") or document.get("file_id") or "") + (document.get("file_name") or "")
    digest = hashlib.sha256(basis.encode("utf-8")).hexdigest()
    return digest
-----8<----- END CONTENT -----8<-----
===== FILE END =====
===== FILE BEGIN =====
PATH: bot_hub/telegram/webhook_handler.py
MODE: 0644
SHA256: AUTO
-----8<----- START CONTENT -----8<-----
from __future__ import annotations

import os
import time
from typing import Any, Dict

from fastapi import APIRouter, Depends, Header, HTTPException, Request
from fastapi.responses import JSONResponse

from ..schemas import TelegramUpdate
from ..auth_guards import api_key_guard, AuthInfo
from .telegram_parser import normalize_update
from .upload_bridge import stub_register_document


router = APIRouter(prefix="/api/telegram", tags=["telegram"])


def _require_webhook_secret(provided: str | None) -> None:
    secret = os.getenv("TELEGRAM_WEBHOOK_SECRET", "")
    if not secret:
        # If not configured, reject to avoid open webhook
        raise HTTPException(status_code=503, detail="Webhook secret not configured")
    if not provided or provided != secret:
        raise HTTPException(status_code=401, detail="Invalid webhook secret")


@router.post("/webhook")
async def webhook(
    update: TelegramUpdate,
    x_secret: str | None = Header(default=None, alias="X-Telegram-Bot-Api-Secret-Token"),
):
    _require_webhook_secret(x_secret)

    normalized = normalize_update(update.model_dump())
    result: Dict[str, Any] = {"ok": True, "received": True, "ts": int(time.time())}

    if normalized.get("text"):
        result["type"] = "text"
        result["preview"] = normalized["text"][:120]

    if normalized.get("document"):
        # Create a stub delivery record (metadata only, no bytes on webhook)
        doc = normalized["document"]
        stub_id = stub_register_document(doc)

        # Optionally store in DELIVERY_DB as metadata-only placeholder
        try:
            from ..deliver import DELIVERY_DB  # local import to avoid cycles at startup
            DELIVERY_DB[stub_id] = {
                "filename": doc.get("file_name") or "telegram.bin",
                "size": int(doc.get("file_size") or 0),
                "mime": doc.get("mime_type") or "application/octet-stream",
                "path": f"telegram://{doc.get('file_id')}",
                "ts": int(time.time()),
                "source": "telegram",
            }
        except Exception:
            pass

        result["type"] = "document"
        result["delivery_stub_id"] = stub_id

    return JSONResponse(status_code=200, content=result)


@router.get("/status")
async def status(_auth: AuthInfo = Depends(api_key_guard)):
    return {"ok": True}
-----8<----- END CONTENT -----8<-----
===== FILE END =====
===== FILE BEGIN =====
PATH: bot_hub/tests/telegram_upload.sh
MODE: 0755
SHA256: AUTO
-----8<----- START CONTENT -----8<-----
#!/usr/bin/env bash
set -euo pipefail

HOST="${HOST:-http://localhost:8080}"
SECRET="${TELEGRAM_WEBHOOK_SECRET:-dev-secret}"

read -r -d '' PAYLOAD <<'JSON'
{
  "update_id": 123456789,
  "message": {
    "message_id": 1,
    "date": 1700000000,
    "chat": {"id": 999, "type": "private"},
    "text": "hello from test script",
    "document": {
      "file_id": "ABCDEF:123",
      "file_unique_id": "UNIQ123",
      "file_name": "sample.txt",
      "mime_type": "text/plain",
      "file_size": 12
    }
  }
}
JSON

curl -sS -X POST "$HOST/api/telegram/webhook" \
  -H "Content-Type: application/json" \
  -H "X-Telegram-Bot-Api-Secret-Token: $SECRET" \
  --data "$PAYLOAD" | jq .
-----8<----- END CONTENT -----8<-----
===== FILE END =====